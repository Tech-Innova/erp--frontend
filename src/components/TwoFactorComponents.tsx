import BackArrowLong from "../assets/icons/back-arrow-long.png";
import Copy from "../assets/icons/copy-icon.png";
import QRCode from "qrcode";
import "./styles/TwoFactorAuth.css";
import { useEffect, useState } from "react";
import { T2fa } from "@super_raptor911/erp-types";
import { api_save2fa, api_verify2fa } from "../api/users";
import { useMainStore } from "../store";
import { useNavigate } from "react-router-dom";
import { RoutePath } from "../constants";

interface Props {
  secret: T2fa;
  refetch: any;
}

const TwoFactorAuth = ({ secret, refetch }: Props) => {
  const handleContinue = async () => {
    await api_save2fa(secret.uid);
    refetch();
  };
  return (
    <div className="twofact-container">
      {secret.enabled ? (
        <TwoFactorOtp secret={secret} />
      ) : (
        <TwoFactorKey secret={secret} handleContinue={handleContinue} />
      )}
    </div>
  );
};

interface Props3 {
  secret: T2fa;
  handleContinue: () => any;
}

const TwoFactorKey = ({ secret, handleContinue }: Props3) => {
  const [qrCode, setQrCode] = useState(false);
  const [image, setimage] = useState("");

  useEffect(() => {
    QRCode.toDataURL(secret.url)
      .then((url) => {
        setimage(url);
      })
      .catch((err) => {
        console.error(err);
      });
  }, []);

  return qrCode ? (
    <div className="twofact-box-container">
      <img src={BackArrowLong} alt="back" className="twofact-back" />
      <div className="twofact-header">
        <div className="twofact-title"> Two step verification </div>
        <div className="twofact-text">Set up an authenticator app</div>
      </div>
      <div className="twofact-text">
        1. Install Google Authenticator app or any other authenticator app of
        your choice on your mobile device.
      </div>
      <div className="twofact-text">
        2. Add your account to the authenticator app through the add new account
        flow.
      </div>
      <div className="twofact-text">
        3. Use "ERP" as the account name and enter this secret key.
      </div>

      <div className="twofact-key">
        {secret.secret}
        <img src={Copy} alt="copy" className="twofact-copy" />
      </div>
      <div className="twofact-button" onClick={handleContinue}>
        {" "}
        Continue{" "}
      </div>
      <div
        className="twofact-qrcode-opt"
        onClick={() => {
          setQrCode(false);
        }}
      >
        Scan QR code
      </div>
    </div>
  ) : (
    <div className="twofact-box-container">
      <img src={BackArrowLong} alt="back" className="twofact-back" />
      <div className="twofact-header">
        <div className="twofact-title"> Two step verification </div>
        <div className="twofact-text">Set up an authenticator app</div>
      </div>
      <div className="twofact-text">
        1. Install Google Authenticator app or any other authenticator app of
        your choice on your mobile device to scan this QR code.
      </div>
      <img style={{ width: 200, height: 200 }} src={image} />
      <div className="twofact-button" onClick={handleContinue}>
        {" "}
        Continue{" "}
      </div>
      <div
        className="twofact-qrcode-opt"
        onClick={() => {
          setQrCode(true);
        }}
      >
        Canâ€™t scan the QR code?
      </div>
    </div>
  );
};

interface Props2 {
  secret: T2fa;
}
const TwoFactorOtp = ({ secret }: Props2) => {
  const [otp, setotp] = useState(0);
  const setTwoFactorAuth = useMainStore((state) => state.setTwoFactorAuth);
  const navigate = useNavigate();

  const handleContinue = async () => {
    const result = await api_verify2fa(secret.uid, otp);
    if (result) {
      setTwoFactorAuth(true);
      navigate(RoutePath.DASHBOARD);
    } else alert("Invalid OTP");
  };

  return (
    <div className="twofact-box-container">
      <img src={BackArrowLong} alt="back" className="twofact-back" />
      <div className="twofact-header">
        <div className="twofact-title"> Two step verification </div>
        <div className="twofact-text">
          Enter the 6-digit verification code generated by your Authenticator
          app
        </div>
      </div>
      <input
        type="number"
        className="twofact-otp"
        placeholder="Enter 6-digit code"
        onChange={(e) => setotp(e.target.valueAsNumber)}
      />
      <div className="twofact-button" onClick={handleContinue}>
        Continue
      </div>
    </div>
  );
};

export default TwoFactorAuth;
